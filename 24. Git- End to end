versions - like milestones
vcs - a tool to manage changes by devs over time also called SCM
git - industry standard
with version control manual  intervention is gone
git helps to collaborate between dev remotely
any project that is tracked by git is git repository
to enable git in any root directory of project use :git init" and it will start tracking the code,
this will create '.git' folder in the root folder

every single file in project goes through 3 important areas:
    1. working area:
      having those files which are not tracked by git or git has barely started tracking it.
      "git status"- tells what are files are on working area or in staging area.
      "git add" - start to track a file by git
      "git add ." - to add all multiple files in staging area
      "git add file1.txt file2.txt" : by this way also you can write multiple names of the files and send them to staging area
      any changes to a file that is tracked by git is in working area
      any new file created will be a untracked file so git add is compulsory.
      all the changes that which are now a version, can be looked using "log" command
    2.staging area :
    any changes in files/files present in staging area are those which will be part of the next version/checkpoint.
    3.repository area:
    here we have those changes which are now part of some versions/checkpoints

    when we do "git add file" - it goes from working->staging area
    if we do "git commit" - goes from staging area -> repository area
    to commit something use "git commit" opens a text editor called vim where we write the version
    & then a new version will be created
    it git version or checkpoint = commit
to remove a file from staging area "git rm--cached <file>..."
to unstage a file into working area: "git restore --staged <file>..."

to see all versions use git log
to do git commit : "git commit"
it opens a text editor because it wants to create a version
to come out of it use "esc btn":wq!
then it creates commit

for not opening the text editor you can write
git commit -m"the_message" : what is basically does is it ignores opening the text editor and in CLI only you can wrtie what you want and gets committed

git maintains 3areas for trackingchanges to a file
  1. working area
  2.staging area
  3.repository area

  working area:
  any file that is already being tracked [whose changes are tracked by git], gets some modification, then these new changes are kept in the working area region. these are mainly the new changes in existing git project.
  if we want to move a change from working area to staging area we can do:
  git add 'file name'
  git add command will help u to add the changes of a file from working afrea to staging area. we can add multiple files together by giving their names space separated
  
  staging area:
  here we have those changes which are going to be the part of next version, but are not currently in the next version.
  
 repository area:
 those changes which are already part of some earlier versions.

 note:
 if we create a brand new file in a project, then by default that file is in a untracked state.
 to start tracking the file we can git add: this will not just tracking but with current content of file , add that file in the staging area directly.

 there can be a case that we have some changes in file in the staging area & working area & some already in repository area.
 this can happen when we have a file who is added in staging area already, but before we add it to the next version we made more changes to the file. these new changes are now part of working directory all together
 
-----------------------------------------------------------------------------------------------

to upload anything in the repository the uploader should be given the permission by author for uploading in the repository, needs the permission for being a contributer
"git remote add origin": git remote add origin <repository_url> is a fundamental command in Git that serves a crucial purpose: it creates a connection between your local Git repository and a remote repository.

why do we use it?
    1.To connect your local work to a central repository: Without this command, your local repository is isolated. You can't easily share your changes with others or retrieve changes they've made.
    2.To enable collaboration: Once you've added the origin remote, you can use commands like git push origin <branch_name> to send your local commits to the remote repository, allowing collaborators to see and merge your work. Similarly, git pull origin <branch_name> lets you download changes from the remote repository to your local machine.
    3.To set up a default remote: By naming the remote origin, many Git commands implicitly assume you're referring to this remote if you don't specify otherwise. This simplifies common operations like pushing and pulling.

to clone something:
there is a green btn in repo click on the dropdown btn and copy the url of clone & then
inside their machine: 
go to any folder, then write 
"git clone <then the copied link>" :- downloads the data

to download anything from repo from github to local machine: "git pull origin main"
any changes made in repo will only come to machine when we download it.

how internally Git Works?:Git -> hashing -> graph/ Tree data Structure
=> Git is actually a key value store.
key -> stores hash of the data in SHA-1 format
value -> stores the actual data as a blob object
git uses a cryptographic hash func. that is -> SHA-1
SHA-1, or Secure Hash Algorithm 1, is a cryptographic hash function that takes an input and produces a 160-bit (20-byte) hash value, used to verify data integrity and ensure it hasn't been altered
for a given data it o/p 40 digit hexadecimal no. 
& the # value is always same for same data
after hash git compresses the data in a blob and stores some metadata about data. 
git init -> initializes a new git repo.
to install tree: sudo apt install tree [to use tree install tree]
to add anything to git: 'git add'

echo 'hello git' | git-hash-object --stdin: 
Imagine Git needs a unique ID number (like a fingerprint) for every piece of content it stores.
1.echo 'hello git': This part just prints the text "hello git".
2.|: This symbol is called a "pipe". It takes the text from the command on the left (echo 'hello git') and sends it as input to the command on the right.
3.git-hash-object --stdin: This is the Git command.
4.git-hash-object: Tells Git: "Calculate the unique ID number (the hash) for some content."
--stdin: Tells git-hash-object: "Get the content to calculate the ID for from the input I receive (which is coming from the pipe)."

In simple terms:
You are telling your computer:
"Take the text 'hello git', send it over to the Git ID calculator, and tell me what unique ID number (hash) Git would give to this specific text."

The command will then output a long string of letters and numbers (like 3f9a9f63d8ddc51e44a470d9efe7c30299f85a4e - the exact hash depends slightly on Git's internal formatting), which is Git's unique fingerprint for the exact content "hello git".

It doesn't store this content in your Git repository yet; it just calculates what the ID would be

if we use normal cat to see files inside '.git' then it will return ghibrish  that's why git gives us custom cat command to read file which is: ".git cat-file -p <full 40 digit hex code with the folder code> -> this will give the same o/p&chnge inside the file.
hash stores the same value object which we have inside the file in 40 hex code. the 1st 2codes are set as folder name/directory & the rest 38 codes are as file name binary object ,this is the key value pair
hash storing binary large object in which it is storing the data in hexadecimal format.
so everything that we do is stored in SHA-1 hash
tree object -> contains pointers [uses hashes], to store blobs, to store trees & 
has metadata:
    type of pointers(tree,blob),
    directory name or filename, 
    mode

to manage directories git uses tree: inside which u can have multipple files i.e. blob or sub directories i.e. trees
.git cat-file -p <40digit hex code> -> gives the o/p/text in the file 
.git cat-file -t <40digit hex code> -> gives the type of the file

commit also get something like a key value pair.
commit-> snapshot of a code/repo in a particular time
ith has: 1.author, 2.message, 3.date
you cant have to same ID 
git diff: git doesnt stores every diffs rather it stores every snapshot of the file, this data is calculated on the go, very inefficient for long codes, thats where same path file comes into the picture.

how & why git creates pack file?

Why Does Git Create Pack Files? (The "Why")

Think of it like moving house. You have lots of individual items. Would you rather:

Carry each item to the new house separately? (Inefficient, takes a long time, lots of trips)
Pack similar items into boxes and then move the boxes? (More efficient, fewer trips, things are organized)
Git does the second thing with pack files. The main reasons are:

Save Disk Space: Over time, your Git repository accumulates many versions of your files (objects). Instead of keeping each version as a complete, separate file, Git identifies similarities between these versions. In a pack file, it can store one full version and then just the differences (deltas) needed to recreate other versions. This drastically reduces the storage space your repository needs. Â  
Improve Efficiency (Especially for Network Operations): When you push or pull changes to a remote repository (like GitHub), transferring one or a few large pack files is much faster and more efficient than transferring hundreds or thousands of small, individual files. It reduces network overhead.
How Does Git Create Pack Files? (The "How")

Git creates pack files in a few key situations:

Garbage Collection (git gc): As you mentioned, the git gc command is like Git's cleanup crew. One of its main jobs is to consolidate loose Git objects (the individual file versions and metadata) into pack files. It looks for objects that are related or similar and then efficiently packs them together, often using delta compression. Â  
Pushing to a Remote Repository: When you run git push, Git needs to send your local changes to the remote server. To do this efficiently, it often creates a pack file containing the necessary objects that the remote repository doesn't already have.
Cloning a Repository: When you first clone a repository, the remote server usually sends the entire repository history as one or more pack files. Your local Git then unpacks these files.
Automatic Background Processes: Git can also automatically trigger garbage collection in the background under certain conditions (e.g., when there are too many loose objects). This automatic process can lead to the creation of pack files without you explicitly running git gc. Â  
The Process in a Nutshell:

Git looks at the various objects in your repository.
It identifies objects that are similar (often different versions of the same file).
It chooses one version as a base and then calculates the differences (deltas) needed to get to the other versions.
It bundles these base objects and their deltas into a single compressed file â the pack file.
It also creates an index file (.idx) alongside the pack file. This index helps Git quickly locate specific objects within the larger pack file, so it doesn't have to decompress the entire thing to find what it needs. Â  
So, pack files are a clever way for Git to keep your repository small and efficient, especially when you're sharing changes over a network. The git gc command is a primary tool for creating and optimizing these pack files locally.


git creates pack files where it doesnt stores two separate objects all together and tries to store corresponding diff pack file and this happens when git does GC[garbage collection] or you push your code to some other remote origin.
to see git garbage collection: "git gc"
check content of pack files: 
git verify-pack .git/objects/pack/pack-<40-hex-code-file-name.pack>
Imagine you're keeping track of changes to a document. Instead of making a complete copy every single time you change a word, which would take up a lot of space, you could just note down the differences from the last version. That's kind of what Git does with pack files.

Think of it like this:

Without Pack Files (the simpler way, but inefficient): Every time you commit a change, Git would store the entire new version of your files as a separate object. If you made many small changes, you'd end up with lots of full copies, eating up space.

With Pack Files (the smarter way): Git is clever. When it does its "housekeeping" (that's the git gc command â think of it as a spring cleaning for your repository) or when you push your changes to a remote place like GitHub, it looks for ways to save space.

Instead of keeping tons of full copies, Git bundles many of these individual "objects" (representing file versions and other Git metadata) into a single, compressed file called a pack file.

Within this pack file, Git doesn't just dump everything together. It's smart about it. If it sees two versions of a file that are very similar, it will store one full version and then just the differences (the "diff") needed to get from the first version to the second. This is way more space-efficient than storing both full versions.

So, a pack file might contain a few full versions of files and then a series of "instructions" (the diffs) on how to transform one version into another.

Why does Git do this?

Save Space: This is the big one. By storing diffs, especially for projects with lots of history and similar files, Git can significantly reduce the overall size of your repository.
Efficiency: Transferring one big pack file is often more efficient than transferring lots of small individual files when you're pushing or pulling changes.
What about git verify-pack .git/objects/pack/pack-<40-hex-code-file-name.pack>?

This command is like opening up one of those bundled pack files and having Git tell you what's inside and if it's all in good shape. It will show you information like:

The number of objects in the pack file.
The total size of the packed objects.
Whether the pack file is consistent and not corrupted.
So, in simple terms, Git's pack files are like compressed archives of your project's history, and instead of storing full copies of every change, it often stores the differences between them to save space and make things more efficient. git gc is the command that often triggers this optimization, and git verify-pack lets you peek inside those optimized bundles.







































































































