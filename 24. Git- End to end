versions - like milestones
vcs - a tool to manage changes by devs over time also called SCM
git - industry standard
with version control manual  intervention is gone
git helps to collaborate between dev remotely
any project that is tracked by git is git repository
to enable git in any root directory of project use :git init" and it will start tracking the code,
this will create '.git' folder in the root folder

every single file in project goes through 3 important areas:
    1. working area:
      having those files which are not tracked by git or git has barely started tracking it.
      "git status"- tells what are files are on working area or in staging area.
      "git add" - start to track a file by git
      "git add ." - to add all multiple files in staging area
      "git add file1.txt file2.txt" : by this way also you can write multiple names of the files and send them to staging area
      any changes to a file that is tracked by git is in working area
      any new file created will be a untracked file so git add is compulsory.
      all the changes that which are now a version, can be looked using "log" command
    2.staging area :
    any changes in files/files present in staging area are those which will be part of the next version/checkpoint.
    3.repository area:
    here we have those changes which are now part of some versions/checkpoints

    when we do "git add file" - it goes from working->staging area
    if we do "git commit" - goes from staging area -> repository area
    to commit something use "git commit" opens a text editor called vim where we write the version
    & then a new version will be created
    it git version or checkpoint = commit
to remove a file from staging area "git rm--cached <file>..."
to unstage a file into working area: "git restore --staged <file>..."

to see all versions use git log
to do git commit : "git commit"
it opens a text editor because it wants to create a version
to come out of it use "esc btn":wq!
then it creates commit

for not opening the text editor you can write
git commit -m"the_message" : what is basically does is it ignores opening the text editor and in CLI only you can wrtie what you want and gets committed

git maintains 3areas for trackingchanges to a file
  1. working area
  2.staging area
  3.repository area

  working area:
  any file that is already being tracked [whose changes are tracked by git], gets some modification, then these new changes are kept in the working area region. these are mainly the new changes in existing git project.
  if we want to move a change from working area to staging area we can do:
  git add 'file name'
  git add command will help u to add the changes of a file from working afrea to staging area. we can add multiple files together by giving their names space separated
  
  staging area:
  here we have those changes which are going to be the part of next version, but are not currently in the next version.
  
 repository area:
 those changes which are already part of some earlier versions.

 note:
 if we create a brand new file in a project, then by default that file is in a untracked state.
 to start tracking the file we can git add: this will not just tracking but with current content of file , add that file in the staging area directly.

 there can be a case that we have some changes in file in the staging area & working area & some already in repository area.
 this can happen when we have a file who is added in staging area already, but before we add it to the next version we made more changes to the file. these new changes are now part of working directory all together
 
-----------------------------------------------------------------------------------------------

to upload anything in the repository the uploader should be given the permission by author for uploading in the repository, needs the permission for being a contributer
"git remote add origin": git remote add origin <repository_url> is a fundamental command in Git that serves a crucial purpose: it creates a connection between your local Git repository and a remote repository.

why do we use it?
    1.To connect your local work to a central repository: Without this command, your local repository is isolated. You can't easily share your changes with others or retrieve changes they've made.
    2.To enable collaboration: Once you've added the origin remote, you can use commands like git push origin <branch_name> to send your local commits to the remote repository, allowing collaborators to see and merge your work. Similarly, git pull origin <branch_name> lets you download changes from the remote repository to your local machine.
    3.To set up a default remote: By naming the remote origin, many Git commands implicitly assume you're referring to this remote if you don't specify otherwise. This simplifies common operations like pushing and pulling.

to clone something:
there is a green btn in repo click on the dropdown btn and copy the url of clone & then
inside their machine: 
go to any folder, then write 
"git clone <then the copied link>" :- downloads the data

to download anything from repo from github to local machine: "git pull origin main"
any changes made in repo will only come to machine when we download it.

how internally Git Works?:Git -> hashing -> graph/ Tree data Structure
=> Git is actually a key value store.
key -> stores hash of the data in SHA-1 format
value -> stores the actual data as a blob object
git uses a cryptographic hash func. that is -> SHA-1
SHA-1, or Secure Hash Algorithm 1, is a cryptographic hash function that takes an input and produces a 160-bit (20-byte) hash value, used to verify data integrity and ensure it hasn't been altered
for a given data it o/p 40 digit hexadecimal no. 
& the # value is always same for same data
after hash git compresses the data in a blob and stores some metadata about data. 
git init -> initializes a new git repo.
to install tree: sudo apt install tree [to use tree install tree]
to add anything to git: 'git add'

echo 'hello git' | git-hash-object --stdin: 
Imagine Git needs a unique ID number (like a fingerprint) for every piece of content it stores.
1.echo 'hello git': This part just prints the text "hello git".
2.|: This symbol is called a "pipe". It takes the text from the command on the left (echo 'hello git') and sends it as input to the command on the right.
3.git-hash-object --stdin: This is the Git command.
4.git-hash-object: Tells Git: "Calculate the unique ID number (the hash) for some content."
--stdin: Tells git-hash-object: "Get the content to calculate the ID for from the input I receive (which is coming from the pipe)."

In simple terms:
You are telling your computer:
"Take the text 'hello git', send it over to the Git ID calculator, and tell me what unique ID number (hash) Git would give to this specific text."

The command will then output a long string of letters and numbers (like 3f9a9f63d8ddc51e44a470d9efe7c30299f85a4e - the exact hash depends slightly on Git's internal formatting), which is Git's unique fingerprint for the exact content "hello git".

It doesn't store this content in your Git repository yet; it just calculates what the ID would be

if we use normal cat to see files inside '.git' then it will return ghibrish  that's why git gives us custom cat command to read file which is: ".git cat-file -p <full 40 digit hex code with the folder code> -> this will give the same o/p&chnge inside the file.
hash stores the same value object which we have inside the file in 40 hex code. the 1st 2codes are set as folder name/directory & the rest 38 codes are as file name binary object ,this is the key value pair
hash storing binary large object in which it is storing the data in hexadecimal format.
so everything that we do is stored in SHA-1 hash
tree object -> contains pointers [uses hashes], to store blobs, to store trees & 
has metadata:
    type of pointers(tree,blob),
    directory name or filename, 
    mode

to manage directories git uses tree: inside which u can have multipple files i.e. blob or sub directories i.e. trees
.git cat-file -p <40digit hex code> -> gives the o/p/text in the file 
.git cat-file -t <40digit hex code> -> gives the type of the file

commit also get something like a key value pair.














































































































