mkdir - make directory
/ -> separator 
there are different types of flags present in linux to make our tasks easy like: 
mkdir -p MyFolder/src -> to create new set of folder/folders inside folder or parent directory[src folder created inside my folder directory]
create single or nested directory with mkdir command

ls - list content
ls -l-> see much more details about a folder
ls -lh -> everything in human readable format

ls -a -> to show all files and folders [including hidden]
ls -lt -> list down everything in folder in sorted form with basis of modification to time [i.e. newest modified files first]
we can also to do in clubbed form for the flags: "ls -lt -lh -a"
pwd - print working directory - shows the whole path of the current working directory you are working on: "pwd -> /users/roy/dev/file.txt"
touch -> to create a file: "touch file1.txt"
touch file{2..6}.txt -> creates multiple files in 1shot [ creates file2.txt - file6.txt]
rm - remove a file: "rm file1.txt"
rm file{2..6}.txt : removes multiple files in 1shot
rm -r directory_name -> if we want to delete a directory then only rm command wont be able to directly delete a directory, so to directly delete it we will rm -r to recurssively delete it whichb deletes any files or folder that is present in the directory.

cd- change directory
cd .. -> ".." in linux represnets 1 directory out
cd ../.. -> 2directory out
home directory represented in ~ symbol

Diff between absolute & relative path
In Linux, an absolute path specifies a file or directory's location starting from the root directory ( / ), while a relative path specifies a location relative to the current working directory. 
Here's a more detailed breakdown: 
Absolute Path: 
Starts with a forward slash (/). 
Provides a complete and unambiguous path to a file or directory, regardless of the current location. 
Example: /home/user/documents/file.txt. 
Relative Path: 
means that standing inside one folder how you should navigate to move to another folder
Does not start with a forward slash. 
Specifies the location of a file or directory relative to the current working directory. 
Uses . (current directory) and .. (parent directory). 
Example: documents/file.txt (if the current directory is home/user). 
man -> manual for commands, gives the full description: "man ls" : gives the full details of the ls in descriptive form.
& to come out of the manual press 'q'

cat -> to display the content of a file, the command "cat" stands for "concatenate," and it's used to display, concatenate, and create files. 

uname -> to see basic system info like kernal , kernal version etc
uname -a -> complete kernal & system information. 
uname -r -> shows kernel version only
uname -s -> shows kernel name
man uname -> display the system info.
whoami -> diplays logged in user name
echo -> print something in CLI terminal just like JS or java has for o/p this bash scripting has echo to show output
these all are bash script programming language
echo "hello world" >> roy.txt: this will input the text hello world text inside roy.txt file which i can see using "cat roy.txt" & if the file already exists it will keep on adding the o/p in the file
>> -> to dump the output in the file whatever the o/p is.
ls >> roy.txt: this dumps all the o/p of ls in roy.txt file and when I open it "cat roy.txt" I can see all the o/p inside roy.txt file.


