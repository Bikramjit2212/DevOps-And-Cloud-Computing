Package Manager:
APT (Advanced Package Tool) : used for debian based distribution like ubuntu
using it for dependency resolution.

Debian Based:
  Key Characteristics:
      Package Management: They typically use the apt package manager, which simplifies software installation and updates.
      Stability: Often, they are known for their reliable performance.   
      Large Software Repositories: They have access to a massive collection of software.

## Update packages
sudo apt update
updating latest packages

## install package
sudo apt install nginx

## auto approve
sudo apt install nginx -y

## remove package
sudo apt remove nginx -y

## install one more
sudo apt install curl -y

YUM (Yellowdog update Modified)
RPM based distribution like centOS and fedora

everything depends on distribution which one to use YUM or apt

DNF (Dandified YUM): succesor of YUM
introduced in Fedora 22 and RHEL 8

## install
sudo dnf install curl
## update
sudo dnf update

System Administration with systemctl
its a command line utility , using that we can manage administration of system services.
starting service, stopping service, enabling services and manage with entire control

let's do one example
## install apcahe2
sudo apt install apache2

## its a web server so let's start it
sudo systemctl start apache2

## check the status
sudo systemctl status apache2

## if its is running you can go to browser and type localhost and enter
## you can see the dafault page of apache2

## to stop again
sudo systemctl stop apache2

## for restrating service
sudo systemctl restart apache2

## disabling service at Boot time
sudo systemctl disable apache2
systemctl is a command-line utility that serves as the central management tool for systemd, the system and service manager now prevalent in most major Linux distributions (including Debian and its derivatives like Ubuntu). Think of it as your primary way to interact with and control the core of your Linux system.
to run any service in bakground use systemctl
The "ctl" in systemctl is indeed a common abbreviation for control.
"systemd" refers to the system daemon, which is the core system and service manager. "systemctl" is the tool you use to control this system daemon and the various services it manages. It's a pretty neat and consistent naming scheme once you understand the "d" for daemon and "ctl" for control!

File Permissions and its Numeric Format
Types: Read(r), write (w), Execute (x)
Users:
Owner : who created the file
Group: a set of users who can access the file
others: all other users who don't direct access

Numeric Permission
Read = 4
Write = 2
Execute = 1
777 (rwxrwxrwx) first represent owner, 2nd group and 3rd others
chmod 755 data.txt

rwxr-xr-x
owner: read write execute
group: read and execute (no write)
others: read and execute (no write)

Symbolic permission
chmod u+x file.txt
(u for user, g for group and o for others)
+ for adding the permission
-for removing the permission
chmod -R 755 directory // multiple permission inside the directory in recursive form
chmod: This is the command itself. It stands for "change mode".
-R: This is an option that stands for "recursive"

755: This is the permission mode you're setting. It's represented in octal (base-8) notation.
the command chmod -R 755 directory will recursively set the following permissions for the specified directory and all its contents:
Owner: Read, write, and execute permissions.   
Group: Read and execute permissions.
Others: Read and execute permissions.

most of the times we give the permission in octal format 
sometimes we can also use symbolic

File Ownership
chown: change owner
chown new_owner : new_group name of your file
chown :group_name data.txt //used in Linux to change the group ownership of the file named data.txt.

**** umask ******
for setting default permission
check umask value: umask
change: "umask 027"
calculate
default permission is 666 and mask is 027 then resulting permission is 640

Disk usage: 
1:df; 2:du
df: its command to check file system usage,
we can also check space, check mounted files system etc..
df
df -h (human readable format)

du : identify directory sizes and locate the space consuming files
du location
du /mnt/d/Physicswalla/Devops-March
du -h /mnt/d/Physicswalla/Devops-March
du -sh /mnt/d/Physicswalla/Devops-March (summarize)

CRON JOBS:
which used in Linux to schedule and automate some time to run at some specific interval to create own job
manage the processes
run any process in background use & symbol
sleep 60 & (it will run in background)

you use "crontab -e" because it provides a safe and reliable way to manage your scheduled tasks by:

Opening your crontab file in an editor.
  Performing syntax checks to prevent errors.
  Ensuring your changes are properly installed and recognized by the system's scheduling service.
  Managing the crontab for your specific user account.
So, if you want to automate a script to run daily, back up your files weekly, or perform any other regularly scheduled task on your Linux system, crontab -e is your go-to command to set that up.

Understanding the Crontab Syntax (The Schedule):
Each line in your crontab file represents one scheduled task (a "cron job"). The schedule for each task is defined by five time-related fields, followed by the command to execute. These five fields are:
-----------------------------------------------------------
minute hour day_of_month month day_of_week command_to_run
-----------------------------------------------------------
Let's break down each field:
-----------------------------------------------------------
minute: 0-59 (The minute of the hour when the command will run).
hour: 0-23 (The hour of the day when the command will run, using a 24-hour clock)
day_of_month: 1-31 (The day of the month when the command will run)
month: 1-12 or jan, feb, mar, etc. (The month of the year when the command will run)
day_of_week: 0-7 or sun, mon, tue, etc. (The day of the week when the command will run. 0 and 7 both represent Sunday)
You can use the following special characters in these fields:
------------------------------------------------------------
* (asterisk): Matches all possible values for that field. For example, * in the "minute" field means the command will run every minute.
, (comma): Specifies a list of values. For example, 15,30 in the "minute" field means the command will run at the 15th and 30th minute of the hour.
- (hyphen): Specifies a range of values. For example, 10-12 in the "hour" field means the command will run at 10 AM, 11 AM, and 12 PM.
/ (slash): Specifies a step value. For example, */5 in the "minute" field means the command will run every 5 minutes (at minutes 0, 5, 10, 15, etc.).

Simple Examples:
Let's look at some easy-to-understand examples:
Run a script called backup.sh located in your home directory every day at 6:00 AM:
"0 6 * * * /home/your_username/backup.sh"
0: At minute 0 of the hour.
6: At hour 6 (6 AM).
*: Every day of the month.
*: Every month.
*: Every day of the week.
/home/your_username/backup.sh: The command to run. Make sure to replace your_username with your actual username!
Run a command to clear a temporary directory every Monday at 3:30 PM:

30 15 * * mon rm -rf /tmp/my_temp_files/
30: At minute 30 of the hour.
15: At hour 15 (3 PM).
*: Every day of the month.
*: Every month.
mon: Only on Mondays.
rm -rf /tmp/my_temp_files/: The command to run (be very careful with rm -rf!).
Run a simple command to echo "Hello" to a file every hour at the beginning of the hour:

0 * * * * echo "Hello from cron" >> /home/your_username/cron_log.txt
0: At minute 0 of the hour.
*: Every hour.
*: Every day of the month.
*: Every month.
*: Every day of the week.
echo "Hello from cron" >> /home/your_username/cron_log.txt: The command to run, appending the output to a file.

to remove:
crontab -r
crontab -l -> to list 

check: jobs
if you want to take it in foreground: fg procesId
fg %1 (1 is jobs id)

to stop the fg process ctrl+z (after this execute jobs command so you can see job is in
stopped state)
again to run in background: bg %1 (it will again start in background) (job is in running state)
if its completed it will move to Done state and them removed from job list)

for terminating job: kill %1 (job ID)
Analyze performance
VMstat (virtual memory statistics)
information processes, memory, paging, blocks, IO
vmstat (provides statistics for process, memory, swappe memory , io/io, system , cpu)
vmstat 1 (after every 1 second calculation)
vmstat 2 5 (every 2 second and 5 iterations)
iostat (input/output statistics)
install: sudo apt install sysstat
iostat
(input output and cpu utilization)
Key Networking Tools
ifconfig (view and configure network interfaces)
install: sudo apt install net-tools
ifconfig (see the available network interfaces)
